scalar Double

scalar Float

scalar Int32

scalar Int64

scalar Uint32

scalar Sint32

scalar Fixed32

scalar Sfixed32

scalar Uint64

scalar Sint64

scalar Fixed64

scalar Sfixed64

scalar Bool

scalar Bytes

scalar Empty

scalar Error

scalar Json

scalar Timestamp

scalar Date

scalar ID

type RoomType {
  id: Int!
  title: String!
}

"段位限制"
type RoomLimit {
  id: Int
  title: String
  rooms: [Room]
}

type GameLog {
  id: Int
  "输赢"
  status: Int
  "注码"
  count: Int
  "开始时间"
  startTime: String
  "结束时间"
  endTime: String
  "房间"
  room: Room
  roomId: Int
  members: [Member]
  memberId: Int
  "提现时间"
  createDate: String
}

type Room {
  "房间名称"
  title: String
  "隐藏房间"
  isHidden: Boolean
  "id"
  id: Int
  "房间密码"
  password: String
  "开始方式,1手动 2自动"
  startType: Int
  "房间类型、场地选择"
  roomType: RoomType
  roomTypeId: Int
  "段位限制"
  roomLimit: RoomLimit
  roomLimitId: Int
  "房主"
  owner: Member
  "房主id"
  ownerId: Int
  "加入房间的人"
  members: [Member]
  "游戏记录"
  gameLogs: [GameLog]
  "提现时间"
  createDate: String
}

type TixianLog {
  id: Int
  "提现人"
  member: Member
  memberId: Int
  "提现数量"
  count: Int
  "提现金额"
  fee: Int
  "提现状态"
  status: Int
  "提现时间"
  createDate: String
  "更新时间"
  updateDate: String
}

type ChongZhiLog {
  "编号"
  id: Int
  "费用"
  fee: Int
  "状态"
  status: Int
  "用户"
  member: Member
  "用户id"
  memberId: Int
  "创建日期"
  createDate: String
  "更新日期"
  updateDate: String
}

type Ticket {
  id: Int
  "名称"
  title: String
  "金币"
  fee: Int
  "总数"
  count: Int
  "领取记录"
  logs: [TicketLog]
  roomType: RoomType
  roomTypeId: Int
  createDate: String
  updateDate: String
}

type TicketLog {
  id: Int
  ticket: Ticket
  ticket_Id: Int
  member: Member
  member_id: Int
  createDate: String
}

type Account {
  id: Int
  steamId: String
  member: Member
  level: String
}

type Member {
  id: Int
  "昵称"
  nickname: String
  "密码"
  password: String
  "头像"
  avatarUrl: String
  "电话"
  mobile: String
  "0未知 1男性 2女性"
  gender: Int
  country: String
  "省份"
  province: String
  city: String
  language: String
  "微信id"
  openid: String
  "状态 0禁用 1正常"
  status: Int
  "余额"
  fee: Int
  "金币"
  fee2: Int
  "钻石"
  fee3: Int
  "用户加入的房间"
  rooms: [Room]
  "用户创建的房间"
  createRooms: [Room]
  "提现记录"
  tixianLogs: [TixianLog]
  chongZhiLogs: [ChongZhiLog]
  "游戏记录"
  gameLogs: [GameLog]
  "用户领取的劵"
  ticketLogs: [TicketLog]
  "提现时间"
  createDate: String
  account: Account
  accountId: Int
}

type MessageNoData {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码\n#### 6-9位\n> 业务编码"
  code: String
  "用户友好提示"
  message: String
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
}

input MemberBindSteamIdInput {
  openid: String!
  steamId: String!
}

input MemberGameLogsInput {
  openid: String!
}

input MemberInput {
  openid: String!
  nickName: String!
  avatarUrl: String!
  gender: Int!
  country: String!
  province: String!
  city: String!
  language: String!
}

input MemberJoinRoomInput {
  "房间编号"
  roomId: Int!
  "用户标识"
  openId: String!
}

"header refreshToken"
type RoomMessage {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码\n#### 6-9位\n> 业务编码"
  code: String
  "用户友好提示"
  message: String
  "返回数据"
  data: Room
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
}

input RoomCreateInput {
  title: String!
  password: String
  "场地黄金白银青铜"
  roomTypeId: Int!
  "段位"
  roomLimitId: Int!
  isHidden: Boolean!
  openId: String!
  startType: Int!
}

type RoomFindOneMember {
  id: Int!
  nickname: String
  avatarUrl: String
}

type RoomsFindOneResult {
  id: Int!
  title: String!
  password: String!
  roomTypeId: Int!
  roomTypeTitle: String!
  roomLimitId: Int!
  roomLimitTitle: String!
  ownerId: Int!
  isHidden: Boolean!
  members: [RoomFindOneMember]!
  "暂定 1自动 2手动"
  startType: Int!
  createDate: String!
  joinCount: Int!
}

"header refreshToken"
type RoomsFindOneResultMessage {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码\n#### 6-9位\n> 业务编码"
  code: String
  "用户友好提示"
  message: String
  "返回数据"
  data: RoomsFindOneResult
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
}

input RoomFindOneInput {
  roomId: Int!
}

type RoomsFindResult {
  id: Int!
  title: String!
  password: String!
  roomTypeId: Int!
  roomTypeTitle: String!
  roomLimitId: Int!
  roomLimitTitle: String!
  ownerId: Int!
  joinCount: Int!
}

type RoomsFindResultMessages {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码 基础信息管理 001\n#### ６-9\n> 业务编码 2000表示正常"
  code: String
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
  "用户友好提示"
  message: String
  "返回数据"
  data: [RoomsFindResult]
}

input RoomsFindInput {
  title: String
  roomLimitId: Int
  roomTypeId: Int
}

type RoomTypesFindResult {
  "房间段位"
  roomLimitTypes: [RoomType]!
  "房间场地"
  roomTypes: [RoomType]!
}

"header refreshToken"
type RoomTypesFindResultMessage {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码\n#### 6-9位\n> 业务编码"
  code: String
  "用户友好提示"
  message: String
  "返回数据"
  data: RoomTypesFindResult
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
}

type TicketLogMessages {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码 基础信息管理 001\n#### ６-9\n> 业务编码 2000表示正常"
  code: String
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
  "用户友好提示"
  message: String
  "返回数据"
  data: [TicketLog]
}

type TicketTitleAndCount {
  "卷的名字"
  title: String!
  "卷的数量"
  count: Int!
}

type MemberTicketNumberResult {
  "用户的id"
  id: Int!
  "用户的名字"
  nickname: String!
  allTicketTitleAndCount: [TicketTitleAndCount]!
}

"header refreshToken"
type MemberTicketNumberResultMessage {
  "#### 1位:\n> H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员\n#### 2位:\n> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面\n#### 3-5位:\n> 子系统编码\n#### 6-9位\n> 业务编码"
  code: String
  "用户友好提示"
  message: String
  "返回数据"
  data: MemberTicketNumberResult
  "H: Http 网络维护人员 B: Backend 后端人员 C: Client 前端人员"
  pre: String
  "子系统编码 基础信息管理 001"
  system: String
  "> 错误等级,0 log提示 无, 1 info提示, 2 warning提示 3 error提示 4 info 弹框 5 warning 弹框 6 error弹框 7 权限不足 8 全屏警告 9 错误页面"
  level: String
  "业务编码 2000表示正常"
  serviceCode: String
}

input MemberTicketNumberInput {
  openid: String!
}

type Query {
  memberGameLogsFind(where: MemberGameLogsInput!): Json
  roomFindOne(where: RoomFindOneInput!): RoomsFindOneResultMessage
  "查找可进入的房间"
  roomsFind(
    "查找房间的条件"
    where: RoomsFindInput!
  ): RoomsFindResultMessages
  "查询房间的段位类型和场地类型"
  roomTypesFind: RoomTypesFindResultMessage
  "查询用户拥有的所有类型的参赛券"
  memberTicketLogFind(
    "用户唯一编号"
    openid: String!
  ): TicketLogMessages
  "用户名字,拥有了多少券"
  memberTicketNumber(
    "查询条件,用户信息"
    where: MemberTicketNumberInput!
  ): MemberTicketNumberResultMessage
}

type Mutation {
  "用户绑定steamId"
  memberBindSteamId(
    "用户openid和steamId"
    input: MemberBindSteamIdInput!
  ): MessageNoData
  memberUpdate(entity: MemberInput!): MessageNoData
  "用户加入房间,并且扣除对应的券"
  memberJoinRoom(
    ""
    where: MemberJoinRoomInput!
  ): MessageNoData
  "创建房间，并且扣除创建该房间需要的券加入房间 TODO 当前没有限制房间数量"
  roomCreate(
    ""
    entity: RoomCreateInput!
  ): RoomMessage
}
